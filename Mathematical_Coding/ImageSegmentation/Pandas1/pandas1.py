# -*- coding: utf-8 -*-
"""pandas1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hkdRB5wdr-vWvuQx2ThbQqDPop5d7MAR

# Pandas 1

## Name Mark Rose

## Class Section 2

## Date 10/3/19
"""

import numpy as np
import pandas as pd
#from google.colab import files

# Files needed
 #    budget.csv
  #   crime_data.csv
#uploaded = files.upload()

"""# Problem 1"""

def random_dataframe(d=None):
    """
    Generate a dictionary.
    Reset labels and return.

    Parameters:
    d (dict): dictionary to initialize DataFrame

    Return:
    csv: csv of DataFrame
    """
    #If there is a dictionary make it into a data frame
    if d != None:
        df = pd.DataFrame(d)
    else:
        #If there is not a dictionary, make a random array and label the columns and rows
        a = np.random.rand(6,5)
        col = ['A','B','C','D','E']
        row = ['I','II','III','IV','V','VI']
        df = pd.DataFrame(a,columns=col,index=row)
    return(df.index,df.columns,df.values)
        
    raise NotImplementedError("Problem 1 Incomplete")

"""# Problem 2"""

# Prob 2
def prob2(file='budget.csv'):
    """
    Read in file as DataFrame. Manipulate data using
    Pandas commmands
    
    Parameters:
        file (str): name of datafile
        
    Return:
        values (ndarray): values of DataFrame
    """
    #Read the file
    df = pd.read_csv(file)
    
    #Changing the food column to be at the begnning
    food = df['Groceries']
    df.drop(labels=['Groceries'], axis=1,inplace = True)
    df.insert(0, 'Groceries', food)
    
    #Sort the values, change the rent, and then change the first 5 values
    df = df.sort_values('Groceries',ascending=False)
    df['Rent'] = 800.0
    df[:5] = 0.0
    return(np.array(df))
    raise NotImplementedError("Problem 2 Incomplete")

"""# Problem 3"""

def prob3(file='budget.csv'):
    """
    Read in data as Pandas DataFrame.
    Manipulate data and return DataFrame values.
    
    Parameters:
        file (str): data file
    
    Return:
        values (ndarray): values of DataFrame
    """
    #Read in the data farme
    df = pd.read_csv(file)
    
    #Fill in the null values with 0 and create two new columns
    df = df.fillna(0.0)
    live_exp_list = ['Rent','Groceries','Gas','Utilities']
    other_list = ['Dining Out','Out With Friends','Netflix']
    df['Living Expenses'] = df[live_exp_list].sum(axis=1)
    df['Other'] = df[other_list].sum(axis=1)
    
    #Get the correlation coeficient and return the mean
    corr_mat = df.corr()
    live_cor = corr_mat['Living Expenses'][live_exp_list].idxmax()
    oth_cor = corr_mat['Other'][other_list].idxmax()
    return(df[live_cor].mean(),df[oth_cor].mean())
    raise NotImplementedError("Problem 3 Incomplete")

"""# Problem 4"""

def prob4(file='crime_data.csv'):
    """
    Read in crime data and use SQL queries to gather certain data.
    
    Parameters:
        file (str): data
    
    Return:
        values (ndarray): values of DataFrame
    """
    #Get the data
    df = pd.read_csv(file)
    df = df.set_index('Year')
    
    #Create a new column rate
    df['Rate'] = df['Total']/df['Population']
    vil_avg = df['Violent'].mean()
    
    #Create masks and get the murders for those years
    mask1 = df['Rate'] > .05
    mask2 = df['Violent'] > vil_avg
    murder_tracker = df[mask1][mask2][['Murder']]
    ans = murder_tracker.values
    ans = ans.squeeze()
    return(ans)
    #raise NotImplementedError("Problem 4 Incomplete")

"""# Problem 5"""

def prob5(file = 'crime_data.csv'):
    """
    Read in crime data and use pandas to answer questions.
    
    Parameters:
        file (str): data
    
    Return:
        ans_1 (list): answer to Question 1
        ans_2 (ndarray): answer to Question 2
        ans_3 (float): answer to Question 3
    """
    #Question one
    data = pd.read_csv(file)
    my_list = data.columns[(data.mean()>1500000)][2:]
    
    #Get the correlation between the three crimes
    corr = data[my_list].corr()
    prop_max = data['Property'].max()
    larc_max = data["Larceny"].max()
    ans1 = 'Property'
    
    #Question 2 get the ammount of aggravated assaults
    new_data = data[data['Year']>=2000]
    new_data = new_data.sort_values('Murder',ascending=True)
    agg_as = new_data['Aggravated Assault']
    agg_as = agg_as[agg_as>850000]
    ans2 = agg_as.values
    
    #Question 3 get the highest year of crime and get the percentage of that
    S = 10
    N = int(len(data)/S)
    
    #Split the decades
    frames = [ data.iloc[i*S:(i+1)*S].copy() for i in range(N+1) ]
    dec_crime = []
    for dec in frames:
        dec_crime.append(dec['Total'].mean())
    
    #Get the highest crime and its percentage of the total
    my_dec = frames[np.argmax(dec_crime)]
    my_crimes = ['Violent','Property','Murder','Forcible Rape','Robbery','Aggravated Assault','Burglary','Larceny','Vehicle Theft']
    high_crime = my_dec[my_crimes].mean().idxmax()
    ans3 = float(my_dec[high_crime].mean()/my_dec['Total'].mean())
    return(ans1,ans2,ans3)

